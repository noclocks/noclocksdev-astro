---
import "prismjs/themes/prism-tomorrow.css";
import { Prism } from "@astrojs/prism";

const benefits = [
  {
    title: "Expert Team",
    description: "Our professionals bring years of industry experience and expertise in cutting-edge technologies."
  },
  {
    title: "Custom Solutions",
    description: "We develop tailored solutions that align perfectly with your unique business requirements."
  },
  {
    title: "Agile Methodology",
    description: "Our adaptive approach ensures quick delivery, continuous improvement, and client collaboration."
  },
  {
    title: "Ongoing Support",
    description: "We provide comprehensive support well beyond project completion to ensure lasting success."
  }
];

const languages = [
  {
    name: "JavaScript",
    value: "js",
    code: `// No Clocks approach in JavaScript
function deliverExcellence() {
  const expertise = ["AI", "Cloud", "Data"];
  const commitment = 100;

  return {
    innovation: true,
    quality: "exceptional",
    timeframe: "on-time",
    support: "always"
  };
}`
  },
  {
    name: "TypeScript",
    value: "ts",
    code: `// No Clocks approach in TypeScript
function deliverExcellence(): Record<string, any> {
  const expertise: string[] = ["AI", "Cloud", "Data"];
  const commitment: number = 100;

  return {
    innovation: true,
    quality: "exceptional",
    timeframe: "on-time",
    support: "always"
  };
}`
  },
  {
    name: "Python",
    value: "python",
    code: `# No Clocks approach in Python
def deliver_excellence():
    expertise = ["AI", "Cloud", "Data"]
    commitment = 100

    return {
        "innovation": True,
        "quality": "exceptional",
        "timeframe": "on-time",
        "support": "always"
    }`
  },
  {
    name: "R",
    value: "r",
    code: `# No Clocks approach in R
deliver_excellence <- function() {
  expertise <- c("AI", "Cloud", "Data")
  commitment <- 100

  return(list(
    innovation = TRUE,
    quality = "exceptional",
    timeframe = "on-time",
    support = "always"
  ))
}`
  },
  {
    name: "PowerShell",
    value: "powershell",
    code: `# No Clocks approach in PowerShell
function Deliver-Excellence {
    $expertise = @("AI", "Cloud", "Data")
    $commitment = 100

    return @{
        innovation = $true
        quality = "exceptional"
        timeframe = "on-time"
        support = "always"
    }
}`
  },
  {
    name: "Bash",
    value: "bash",
    code: `# No Clocks approach in Bash
deliver_excellence() {
    local expertise=("AI" "Cloud" "Data")
    local commitment=100

    echo "Innovation: enabled"
    echo "Quality: exceptional"
    echo "Timeframe: on-time"
    echo "Support: always"
}`
  },
  {
    name: "SQL",
    value: "sql",
    code: `-- No Clocks approach in SQL
CREATE TABLE NoClocks_Excellence (
    Expertise VARCHAR(50),
    Commitment INTEGER,
    Innovation BOOLEAN,
    Quality VARCHAR(50),
    Timeframe VARCHAR(50),
    Support VARCHAR(50)
);

INSERT INTO NoClocks_Excellence VALUES
    ('AI', 100, TRUE, 'exceptional', 'on-time', 'always'),
    ('Cloud', 100, TRUE, 'exceptional', 'on-time', 'always'),
    ('Data', 100, TRUE, 'exceptional', 'on-time', 'always');`
  },
  {
    name: "Go",
    value: "go",
    code: `// No Clocks approach in Go
package noclocks

func DeliverExcellence() map[string]interface{} {
    expertise := []string{"AI", "Cloud", "Data"}
    commitment := 100

    return map[string]interface{}{
        "innovation": true,
        "quality":    "exceptional",
        "timeframe":  "on-time",
        "support":    "always",
    }
}`
  },
  {
    name: "Rust",
    value: "rust",
    code: `// No Clocks approach in Rust
fn deliver_excellence() -> std::collections::HashMap<&'static str, Box<dyn std::any::Any>> {
    let expertise = vec!["AI", "Cloud", "Data"];
    let commitment = 100;

    let mut result = std::collections::HashMap::new();
    result.insert("innovation", Box::new(true) as Box<dyn std::any::Any>);
    result.insert("quality", Box::new("exceptional") as Box<dyn std::any::Any>);
    result.insert("timeframe", Box::new("on-time") as Box<dyn std::any::Any>);
    result.insert("support", Box::new("always") as Box<dyn std::any::Any>);

    result
}`
  }
];

const { title = "Why Choose No Clocks" } = Astro.props;
---

<section class="why-choose-us">
  <div class="container">
    <div class="why-choose-content">
      <div class="why-choose-text">
        <h2 class="section-title">{title}</h2>
        <p class="why-choose-intro">
          At No Clocks, we blend technical excellence with business acumen to deliver solutions
          that drive meaningful results. Our approach is built on four key pillars:
        </p>

        <div class="benefits-list">
          {benefits.map((benefit) => (
            <div class="benefit-item">
              <h3 class="benefit-title">{benefit.title}</h3>
              <p class="benefit-description">{benefit.description}</p>
            </div>
          ))}
        </div>
      </div>

      <div class="why-choose-visual">
        <div class="visual-element">
          <div class="code-tabs">
            <div class="tabs-header">
              {languages.map((lang, index) => (
                <button
                  class={`tab-button ${index === 0 ? 'active' : ''}`}
                  data-language={lang.value}
                >
                  {lang.name}
                </button>
              ))}
            </div>
            <div class="code-block">
              {languages.map((lang, index) => (
                <div
                  class={`tab-content ${index === 0 ? 'active' : ''}`}
                  data-language={lang.value}
                >
                  <Prism lang={lang.value} code={lang.code} />
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Get the language value from the clicked button
        const language = button.getAttribute('data-language');

        // Remove active class from all buttons and contents
        tabButtons.forEach(btn => btn.classList.remove('active'));
        tabContents.forEach(content => content.classList.remove('active'));

        // Add active class to the clicked button
        button.classList.add('active');

        // Find and show the corresponding content
        const activeContent = document.querySelector(`.tab-content[data-language="${language}"]`);
        if (activeContent) {
          activeContent.classList.add('active');
        }
      });
    });
  });
</script>

<style lang="scss">
  .why-choose-us {
    padding: 6rem 0;
    background-color: #080808;
    overflow: hidden;

    .why-choose-content {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 4rem;
      align-items: center;
    }

    .section-title {
      font-size: 2.5rem;
      margin-bottom: 1.5rem;
      position: relative;

      &::after {
        content: '';
        display: block;
        width: 60px;
        height: 3px;
        background: #0af;
        margin-top: 0.75rem;
      }
    }

    .why-choose-intro {
      font-size: 1.2rem;
      line-height: 1.6;
      color: #ccc;
      margin-bottom: 2.5rem;
    }

    .benefits-list {
      display: grid;
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .benefit-item {
      position: relative;
      padding-left: 1.5rem;

      &::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0.5rem;
        width: 8px;
        height: 8px;
        background: #0af;
        border-radius: 50%;
      }
    }

    .benefit-title {
      font-size: 1.3rem;
      margin-bottom: 0.5rem;
      color: #fff;
    }

    .benefit-description {
      color: #aaa;
      line-height: 1.5;
    }

    .why-choose-visual {
      position: relative;
    }

    .visual-element {
      width: 100%;
      min-height: 300px;
      position: relative;
      overflow: hidden;
      border-radius: 8px;
      background: linear-gradient(135deg, #0a0a0a, #1a1a1a);
      box-shadow: 0 30px 60px rgba(0, 0, 0, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;

      &::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(
          to bottom right,
          rgba(10, 170, 255, 0.05),
          rgba(10, 170, 255, 0.02),
          rgba(10, 170, 255, 0.01),
          transparent
        );
        transform: rotate(30deg);
        z-index: 0;
      }
    }

    .code-tabs {
      position: relative;
      z-index: 1;
      width: 90%;
      border-radius: 6px;
      overflow: hidden;
      background: #1a1a1a;
      box-shadow: 0 4px 30px rgba(0, 0, 0, 0.4);
    }

    .tabs-header {
      display: flex;
      overflow-x: auto;
      background: #0f0f0f;
      border-bottom: 1px solid #333;

      &::-webkit-scrollbar {
        height: 5px;
      }

      &::-webkit-scrollbar-thumb {
        background: #444;
        border-radius: 10px;
      }
    }

    .tab-button {
      background: transparent;
      border: none;
      color: #999;
      padding: 0.75rem 1rem;
      font-size: 0.85rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s;
      white-space: nowrap;

      &:hover {
        color: #0af;
        background: rgba(10, 170, 255, 0.05);
      }

      &.active {
        color: #0af;
        background: #1a1a1a;
        border-bottom: 2px solid #0af;
      }
    }

    .code-block {
      position: relative;
      z-index: 1;
      width: 100%;
      max-height: 350px;
      overflow: auto;

      &::-webkit-scrollbar {
        width: 6px;
        height: 6px;
      }

      &::-webkit-scrollbar-thumb {
        background: #444;
        border-radius: 10px;
      }
    }

    .tab-content {
      display: none;
      padding: 0;

      &.active {
        display: block;
      }

      :global(pre) {
        margin: 0;
        border-radius: 0;
        background: transparent !important;
        font-size: 0.9rem;

        :global(code) {
          font-family: 'JetBrains Mono', 'Fira Code', 'Courier New', monospace;
        }
      }
    }
  }

  @media (max-width: 992px) {
    .why-choose-us {
      .why-choose-content {
        grid-template-columns: 1fr;
        gap: 3rem;
      }

      .why-choose-visual {
        order: -1;
      }
    }
  }

  @media (max-width: 768px) {
    .why-choose-us {
      padding: 4rem 0;

      .section-title {
        font-size: 2rem;
      }

      .why-choose-intro {
        font-size: 1.1rem;
      }

      .benefit-title {
        font-size: 1.2rem;
      }
    }
  }
</style>
